{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Options.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n\timport { onMount } from 'svelte';\n\timport { createEventDispatcher } from 'svelte'\n\timport Options from './Options.svelte'\n\n\t// import utils from '../modules/utils.js'\n\timport starSystems from '../modules/starSystems.js'\n\timport starSystemPrinter from '../modules/starSystemPrinter.js'\n\timport jobs from '../modules/jobs.js'\n\timport jobsPrinter from '../modules/jobsPrinter.js'\n\timport encounters from '../modules/encounters.js'\n\timport encountersPrinter from '../modules/encountersPrinter.js'\n\n\t// Exported params that you can set from outside.\n\texport let appData\n\texport let starData\n\texport let jobsData\n\texport let encountersData\n\texport let options // See src/data/options.json\n\texport let results // Also saved to localStorage\n\t\n\tlet output = 'Waiting on User.' // Reactive variable! Love Svelte v3 :)\n\t\n\tconst dispatch = createEventDispatcher();\n\n\tfunction handleOptions() {\n\t\toptions.showOptions = !options.showOptions\n\t\tsaveOptions()\n\t}\n\n\t// Main action - user has clicked the button.\n\tfunction handleNewStarSystem() {\n\t\tresults = {}\n\t\tresults.starSystem = starSystems.createStarSystem(starData, options)\n\t\toutput = starSystemPrinter.printStarSystem(results.starSystem, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleNewCargoJob() {\n\t\tresults = {}\n\t\tresults.job = jobs.createCargoRunJob(jobsData, options)\n\t\toutput = jobsPrinter.printJob(results.job, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleNewMilitaryMission () {\n\t\tresults = {}\n\t\tresults.job = jobs.createMilitaryMission(jobsData, options)\n\t\toutput = jobsPrinter.printJob(results.job, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleNewExpedition () {\n\t\tresults = {}\n\t\tresults.job = jobs.createExpedition(jobsData, options)\n\t\toutput = jobsPrinter.printJob(results.job, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleStarSystemEncounter(tensMod = 0) {\n\t\tresults = {}\n\t\tresults.starSystemEncounter = encounters.createStarSystemEncounter(encountersData, tensMod)\n\t\toutput = encountersPrinter.printStarSystemEncounter(results.starSystemEncounter, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleSurfaceEncounter(type) {\n\t\tresults = {}\n\t\tresults.surfaceEncounter = encounters.createSurfaceEncounter(encountersData, type)\n\t\toutput = encountersPrinter.printSurfaceEncounter(results.surfaceEncounter, options)\n\t\tsaveData()\n\t}\n\n\tfunction handleColonyEncounter(tensMod) {\n\t\tresults = {}\n\t\tresults.colonyEncounter = encounters.createColonyEncounter(encountersData, tensMod)\n\t\toutput = encountersPrinter.printColonyEncounter(results.colonyEncounter, options)\n\t\tsaveData()\n\t}\n\n\tfunction saveData() {\n\t\tsaveOptions()\n\t\tdispatch('saveData', {'key': 'results', 'value': results});\n\t}\n\t\n\t// Intermediate step - re-render output, and pass the save command up and out.\n\tfunction saveOptions() {\n\t\tprintResults()\n\t\tdispatch('saveData', {'key': 'options', 'value': options});\n\t}\n\n\tfunction printResults() {\n\t\t// Existing session data.\n\t\t// TODO Keep all output separately, and add more UI to display them in tabs or similar.\n\t\tif (Object.entries(results).length > 0) { // check for empty object\n\t\t\tif (results.surfaceEncounter) {\n\t\t\t\toutput = encountersPrinter.printSurfaceEncounter(results.surfaceEncounter, options)\n\t\t\t} else if (results.starSystemEncounter) {\n\t\t\t\toutput = encountersPrinter.printStarSystemEncounter(results.starSystemEncounter, options)\n\t\t\t} else if (results.job) {\n\t\t\t\toutput = jobsPrinter.printJob(results.job, options)\n\t\t\t} else if (results.starSystem) {\n\t\t\t\toutput = starSystemPrinter.printStarSystem(results.starSystem, options)\n\t\t\t} \n\t\t}\n\t}\n\n\tonMount(async () => {\n\t\tprintResults()\n\t})\n\n</script>\n\n<main>\n\t<h2>{appData.title}</h2>\n\t\n\t<p>An <strong><i>unofficial</i></strong> web app to help Game Mothers with their prep. Click buttons and then links to generate random stuff. Results at bottom in plaintext.</p>\n\t\n\t<button on:click={e => options.showUI = 'starSystems'}>Star Systems</button>\n\t<button on:click={e => options.showUI = 'jobs'}>Jobs</button>\n\t<button on:click={e => options.showUI = 'encounters'}>Encounters</button>\n\t\n\t<div style=\"display: {options.showUI === 'starSystems' ? 'block' : 'none'}\">\n\t\t<h4>Star Systems</h4>\n\t\t&middot; <a href=\".\" on:click|preventDefault={saveOptions} on:click={handleNewStarSystem}>Star System</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={handleOptions}>(Options)</a>\n\t\t<Options starData={starData} options={options} on:saveOptions={saveOptions}/>\n\t</div>\n\t<div style=\"display: {options.showUI === 'jobs' ? 'block' : 'none'}\">\n\t\t<h4>Jobs</h4>\n\t\t&middot; <a href=\".\" on:click|preventDefault={handleNewCargoJob}>Cargo</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={handleNewMilitaryMission}>Military</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={handleNewExpedition}>Expedition</a>\n\t</div>\n\t<div style=\"display: {options.showUI === 'encounters' ? 'block' : 'none'}\">\n\t\t<h4>Star System Encounters</h4>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleStarSystemEncounter()}>System</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleStarSystemEncounter(-3)}>Rim</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleStarSystemEncounter(-5)}>Uncharted</a>\n\t\t<h4>Surface Encounters</h4>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleSurfaceEncounter('uninhabited')}>Uninhabited</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleSurfaceEncounter('colonized')}>Colonized</a>\n\t\t<h4>Colony Encounters</h4>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleColonyEncounter(0)}>Young</a>\n\t\t&middot; <a href=\".\" on:click|preventDefault={e => handleColonyEncounter(+1)}>Established</a>\n\t</div>\n\t\n\t<h4>Results</h4>\n\t<pre id=\"results\">{output}</pre>\n\n\t<footer>\n\t\t<small>See the <a href=\"{appData.githubUrl}\">github repo</a> for details. {appData.copyright} Last updated {appData.version}.</small>\n\t</footer>\n</main>\n\n<style>\n\tpre {\n\t\tmin-height: 2rem;\n\t}\n</style>",
    "<script>\r\n    import { createEventDispatcher } from 'svelte'\r\n    \r\n    export let starData;\r\n    export let options; // See src/data/options.json\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    // Create a UI-only version of the data\r\n\tlet starLocations = JSON.parse(JSON.stringify(starData.starLocations))\r\n\tstarLocations.push({\"key\": \"ran\", \"name\": \"Random\"})\r\n\r\n    function toggleHideUninhabited() {\r\n        options.showSurveyedDetails = !options.showSurveyedDetails\r\n        dispatch('saveOptions') // no need to pass options up, it's the same object.\r\n    }\r\n    \r\n    function saveOptions() {\r\n        // console.log('Options.svelte - saveOptions')\r\n\t\tdispatch('saveOptions') // no need to pass options up, it's the same object.\r\n\t}\r\n</script>\r\n\r\n<div style=\"display: {options.showOptions === false ? 'none' : 'block'}\">\r\n    <form>\r\n        <fieldset>\r\n            <legend>Star System Options</legend>\r\n            \r\n            <div class=\"subTitle\">Output Options</div>\r\n            <div>\r\n                <label>\r\n                    <input type=\"checkbox\" on:click={toggleHideUninhabited} bind:checked={options.showSurveyedDetails}> Show surveyed details\r\n                </label>\r\n            </div>\r\n            \r\n            <div class=\"subTitle\">Star System Location</div>\r\n            <div>\r\n                {#each starLocations as item}\r\n                    <label>\r\n                        <!-- FIXME on:change fires before the value is updated to the new value, meaning it's one step behind. -->\r\n                        <input type=radio on:click={saveOptions} bind:group={options.starLocation} value={item.key}> {item.name}\r\n                    </label>\r\n                {/each}\r\n            </div>\r\n        </fieldset>\r\n    </form>\r\n</div>\r\n\r\n<style>\r\n    .subTitle {\r\n        font-weight: bold;\r\n        margin: 0.5rem 0;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA6JC,GAAG,eAAC,CAAC,AACJ,UAAU,CAAE,IAAI,AACjB,CAAC;AC9GE,SAAS,eAAC,CAAC,AACP,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,MAAM,CAAC,CAAC,AACpB,CAAC"
}